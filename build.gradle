buildscript {
  repositories {
     mavenCentral()
     jcenter()
  }

  dependencies {
    classpath('org.jfrog.buildinfo:build-info-extractor-gradle:4.4.12')
  }
}

plugins {
  id 'java'
}

sourceCompatibility = 1.7
targetCompatibility = 1.7

group = 'com.google'
version = '1.0.0'

repositories {
   mavenCentral()
   jcenter()
}

dependencies {
  compile 'com.google.apis:google-api-services-sqladmin:v1beta4-rev30-1.20.0'
  compile 'org.apache.commons:commons-lang3:3.4'
  compile 'org.apache.commons:commons-collections4:4.0'
  compile 'com.github.rholder:guava-retrying:2.0.0'
  compile 'mysql:mysql-connector-java:5.1.34'
  compile 'com.google.cloud.sql:mysql-socket-factory:1.0.0-beta1'

  compile 'com.google.apis:google-api-services-iam:v1-rev3-1.21.0'
  compile 'com.google.apis:google-api-services-cloudresourcemanager:v1-rev5-1.21.0'

  compile 'org.slf4j:slf4j-api:1.7.21'
  compile 'org.slf4j:slf4j-simple:1.7.21'

  testCompile('org.mockito:mockito-core:1.10.19') {
    exclude group: 'org.hamcrest'
  }
  testCompile 'junit:junit:4.11'
  testCompile 'com.google.code.findbugs:annotations:3.0.1'
  testCompile 'net.sf.opencsv:opencsv:2.3'
  testCompile 'org.unitils:unitils-core:3.4.2'

}

configurations {
  compile.exclude group: 'commons-logging'
  all {
    resolutionStrategy {
      force 'com.google.code.findbugs:jsr305:2.0.2'
      force 'mysql:mysql-connector-java:5.1.38'
    }
  }
}

task gcloudAuthenticate(type: Exec) {
  def gcloudCommand = ['gcloud',
                       'beta',
                       'auth',
                       'application-default',
                       'activate-service-account',
                       '--key-file',
                       file("src/integrationTest/resources/${appengineServiceAccountJsonKeyFile}")]

  commandLine = portableCommand(gcloudCommand)
}

def portableCommand(def command) {
  final boolean operatingSystemIsWindows = System.getProperty("os.name").toLowerCase().contains('windows')

  if (operatingSystemIsWindows) {
    return ['cmd', '/c'] + command
  }

  return command
}

task wrapper(type: Wrapper) {
  gradleVersion = '2.13'
  distributionUrl = "http://services.gradle.org/distributions/gradle-${gradleVersion}-all.zip"
}
